// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3588.Steamworks.commands;
import org.opencv.core.Rect;
import org.opencv.imgproc.Imgproc;
import org.usfirst.frc3588.Steamworks.GripPipelinePeg;
import org.usfirst.frc3588.Steamworks.Robot;
import org.usfirst.frc3588.Steamworks.RobotMap;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.vision.VisionThread;

/**
 *
 */
public class DrivePegCommand extends Command {
	private final Object imgLock = new Object();
	private int centerX = 0;
	private VisionThread visionThread;
	private int height = 0;
	private int width = 0;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public DrivePegCommand() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.chassis);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
	protected void initialize() {
    	System.out.println("Drive Peg Command Initialize");
        visionThread = new VisionThread(Robot.cam0, new GripPipelinePeg(), pipeline -> {
            if (!pipeline.filterContoursOutput().isEmpty()) {
                Rect r1 = Imgproc.boundingRect(pipeline.filterContoursOutput().get(0));
                Rect r2 = Imgproc.boundingRect(pipeline.filterContoursOutput().get(1));
                synchronized (imgLock) {
                	centerX = (r1.x + r2.x + r2.width)/2;
                	width = (r1.width + r2.width)/2;
                    System.out.println("CenterX = " + centerX + " R1.x = " + r1.x + " R2.x = " + r2.x + " R2.width " + r2.width);
                }
            }
        });
        visionThread.start();
        System.out.println("finished drive peg initialize");
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
	protected void execute() {
    	//visionThread.
    	System.out.println("center = " + centerX + " width = " + width);
    	synchronized (imgLock) {
    		centerX = this.centerX;
    	}
    	double turn = centerX - (Robot.IMG_WIDTH / 2);
    	RobotMap.chassisRobotDrive.mecanumDrive_Cartesian(turn, .3, 0.0, 0.0);
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
	protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
	protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
	protected void interrupted() {
    }
}
