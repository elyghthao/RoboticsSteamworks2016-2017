// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3588.Steamworks.commands;

import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc3588.Steamworks.Robot;
import org.usfirst.frc3588.Steamworks.RobotMap;

/**
 *
 */
public class RopeArmOpen extends Command {

	private static final int OPEN_POSITION = 497;
	private Encoder rightRopeEncoder;
	private Encoder leftRopeEncoder;

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public RopeArmOpen() {

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
		requires(Robot.climbing);

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}

	// Called just before this Command runs the first time
	protected void initialize() {
		leftRopeEncoder = new Encoder(6, 7, false, Encoder.EncodingType.k1X);
		leftRopeEncoder.reset();

		rightRopeEncoder = new Encoder(8, 9, false, Encoder.EncodingType.k1X);
		rightRopeEncoder.reset();
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
		int leftCount = leftRopeEncoder.get();
		int rightCount = rightRopeEncoder.get();

		if (leftCount < OPEN_POSITION) {
			RobotMap.climbingLeftSweeper.set(0.5);

		} else if (leftCount > OPEN_POSITION) {
			RobotMap.climbingLeftSweeper.set(-0.5);
		} else if (leftCount == OPEN_POSITION) {
			RobotMap.climbingLeftSweeper.set(0.0);
		}
		if (rightCount < OPEN_POSITION) {
			RobotMap.climbingRightSweeper.set(0.5);

		} else if (rightCount > OPEN_POSITION) {
			RobotMap.climbingRightSweeper.set(-0.5);
		} else if (rightCount == OPEN_POSITION) {
			RobotMap.climbingRightSweeper.set(0.0);
		}
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		int leftCount = leftRopeEncoder.get();
		int rightCount = rightRopeEncoder.get();

		if (leftCount == OPEN_POSITION && rightCount == OPEN_POSITION) {
			return true;
		}

		else {
			return false;
		}
	}

	// Called once after isFinished returns true
	protected void end() {
		RobotMap.climbingRightSweeper.set(0.0);
		RobotMap.climbingLeftSweeper.set(0.0);
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
		end();
	}
}
